// DO NOT EDIT: Automatically-generated file
//
// original UCD file: LineBreak-13.0.0.txt
// original UCD timestamp: 2020-02-17, 07:43:02 GMT [KW, LI]

// clang-format off

#include "lbrk.hpp"
#include <cstddef>

namespace lbrk {

// lotable provides fast lookup for lower ASCII-7.
static const lbc lotable[128] = {
    lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM,
    lbc::CM, lbc::BA, lbc::LF, lbc::BK, lbc::BK, lbc::CR, lbc::CM, lbc::CM,
    lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM,
    lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM, lbc::CM,
    lbc::SP, lbc::EX, lbc::QU, lbc::AL, lbc::PR, lbc::PO, lbc::AL, lbc::QU,
    lbc::OP, lbc::CP, lbc::AL, lbc::PR, lbc::IS, lbc::HY, lbc::IS, lbc::SY,
    lbc::NU, lbc::NU, lbc::NU, lbc::NU, lbc::NU, lbc::NU, lbc::NU, lbc::NU,
    lbc::NU, lbc::NU, lbc::IS, lbc::IS, lbc::AL, lbc::AL, lbc::AL, lbc::EX,
    lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL,
    lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL,
    lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL,
    lbc::AL, lbc::AL, lbc::AL, lbc::OP, lbc::PR, lbc::CP, lbc::AL, lbc::AL,
    lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL,
    lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL,
    lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL, lbc::AL,
    lbc::AL, lbc::AL, lbc::AL, lbc::OP, lbc::BA, lbc::CL, lbc::AL, lbc::CM,
};

// hiTable is a range-encoded lookup for codepoints
// starting at U+0080.
//
// Values in this table have the following format:
// - higher 8 bits contain lbc value
// - lower 24 bits contain first codepoint in range
//
// Table size in memory: 9.3K
//
static const uint32_t hitable[2381] = {
    0x08000080, 0x1A000085, 0x08000086, 0x0E0000A0, 0x1D0000A1, 0x1E0000A2, 0x1F0000A3, 0x010000A6,
    0x200000AB, 0x010000AC, 0x030000AD, 0x010000AE, 0x1E0000B0, 0x1F0000B1, 0x010000B2, 0x040000B4,
    0x010000B5, 0x200000BB, 0x010000BC, 0x1D0000BF, 0x010000C0, 0x040002C8, 0x010002C9, 0x040002CC,
    0x010002CD, 0x040002DF, 0x010002E0, 0x08000300, 0x0E00034F, 0x08000350, 0x0E00035C, 0x08000363,
    0x01000370, 0x1500037E, 0x0100037F, 0x08000483, 0x0100048A, 0x15000589, 0x0300058A, 0x0100058B,
    0x1F00058F, 0x01000590, 0x08000591, 0x030005BE, 0x080005BF, 0x010005C0, 0x080005C1, 0x010005C3,
    0x080005C4, 0x0D0005C6, 0x080005C7, 0x010005C8, 0x110005D0, 0x010005EB, 0x110005EF, 0x010005F3,
    0x1E000609, 0x1500060C, 0x0100060E, 0x08000610, 0x0D00061B, 0x0800061C, 0x0100061D, 0x0D00061E,
    0x01000620, 0x0800064B, 0x1C000660, 0x1E00066A, 0x1C00066B, 0x0100066D, 0x08000670, 0x01000671,
    0x0D0006D4, 0x010006D5, 0x080006D6, 0x010006DD, 0x080006DF, 0x010006E5, 0x080006E7, 0x010006E9,
    0x080006EA, 0x010006EE, 0x1C0006F0, 0x010006FA, 0x08000711, 0x01000712, 0x08000730, 0x0100074B,
    0x080007A6, 0x010007B1, 0x1C0007C0, 0x010007CA, 0x080007EB, 0x010007F4, 0x150007F8, 0x0D0007F9,
    0x010007FA, 0x080007FD, 0x1F0007FE, 0x01000800, 0x08000816, 0x0100081A, 0x0800081B, 0x01000824,
    0x08000825, 0x01000828, 0x08000829, 0x0100082E, 0x08000859, 0x0100085C, 0x080008D3, 0x010008E2,
    0x080008E3, 0x01000904, 0x0800093A, 0x0100093D, 0x0800093E, 0x01000950, 0x08000951, 0x01000958,
    0x08000962, 0x03000964, 0x1C000966, 0x01000970, 0x08000981, 0x01000984, 0x080009BC, 0x010009BD,
    0x080009BE, 0x010009C5, 0x080009C7, 0x010009C9, 0x080009CB, 0x010009CE, 0x080009D7, 0x010009D8,
    0x080009E2, 0x010009E4, 0x1C0009E6, 0x010009F0, 0x1E0009F2, 0x010009F4, 0x1E0009F9, 0x010009FA,
    0x1F0009FB, 0x010009FC, 0x080009FE, 0x010009FF, 0x08000A01, 0x01000A04, 0x08000A3C, 0x01000A3D,
    0x08000A3E, 0x01000A43, 0x08000A47, 0x01000A49, 0x08000A4B, 0x01000A4E, 0x08000A51, 0x01000A52,
    0x1C000A66, 0x08000A70, 0x01000A72, 0x08000A75, 0x01000A76, 0x08000A81, 0x01000A84, 0x08000ABC,
    0x01000ABD, 0x08000ABE, 0x01000AC6, 0x08000AC7, 0x01000ACA, 0x08000ACB, 0x01000ACE, 0x08000AE2,
    0x01000AE4, 0x1C000AE6, 0x01000AF0, 0x1F000AF1, 0x01000AF2, 0x08000AFA, 0x01000B00, 0x08000B01,
    0x01000B04, 0x08000B3C, 0x01000B3D, 0x08000B3E, 0x01000B45, 0x08000B47, 0x01000B49, 0x08000B4B,
    0x01000B4E, 0x08000B55, 0x01000B58, 0x08000B62, 0x01000B64, 0x1C000B66, 0x01000B70, 0x08000B82,
    0x01000B83, 0x08000BBE, 0x01000BC3, 0x08000BC6, 0x01000BC9, 0x08000BCA, 0x01000BCE, 0x08000BD7,
    0x01000BD8, 0x1C000BE6, 0x01000BF0, 0x1F000BF9, 0x01000BFA, 0x08000C00, 0x01000C05, 0x08000C3E,
    0x01000C45, 0x08000C46, 0x01000C49, 0x08000C4A, 0x01000C4E, 0x08000C55, 0x01000C57, 0x08000C62,
    0x01000C64, 0x1C000C66, 0x01000C70, 0x04000C77, 0x01000C78, 0x08000C81, 0x04000C84, 0x01000C85,
    0x08000CBC, 0x01000CBD, 0x08000CBE, 0x01000CC5, 0x08000CC6, 0x01000CC9, 0x08000CCA, 0x01000CCE,
    0x08000CD5, 0x01000CD7, 0x08000CE2, 0x01000CE4, 0x1C000CE6, 0x01000CF0, 0x08000D00, 0x01000D04,
    0x08000D3B, 0x01000D3D, 0x08000D3E, 0x01000D45, 0x08000D46, 0x01000D49, 0x08000D4A, 0x01000D4E,
    0x08000D57, 0x01000D58, 0x08000D62, 0x01000D64, 0x1C000D66, 0x01000D70, 0x1E000D79, 0x01000D7A,
    0x08000D81, 0x01000D84, 0x08000DCA, 0x01000DCB, 0x08000DCF, 0x01000DD5, 0x08000DD6, 0x01000DD7,
    0x08000DD8, 0x01000DE0, 0x1C000DE6, 0x01000DF0, 0x08000DF2, 0x01000DF4, 0x08000E31, 0x01000E32,
    0x08000E34, 0x01000E3B, 0x1F000E3F, 0x01000E40, 0x08000E47, 0x01000E4F, 0x1C000E50, 0x03000E5A,
    0x01000E5C, 0x08000EB1, 0x01000EB2, 0x08000EB4, 0x01000EBD, 0x08000EC8, 0x01000ECE, 0x1C000ED0,
    0x01000EDA, 0x04000F01, 0x01000F05, 0x04000F06, 0x0E000F08, 0x04000F09, 0x03000F0B, 0x0E000F0C,
    0x0D000F0D, 0x0E000F12, 0x01000F13, 0x0D000F14, 0x01000F15, 0x08000F18, 0x01000F1A, 0x1C000F20,
    0x01000F2A, 0x03000F34, 0x08000F35, 0x01000F36, 0x08000F37, 0x01000F38, 0x08000F39, 0x1D000F3A,
    0x07000F3B, 0x1D000F3C, 0x07000F3D, 0x08000F3E, 0x01000F40, 0x08000F71, 0x03000F7F, 0x08000F80,
    0x03000F85, 0x08000F86, 0x01000F88, 0x08000F8D, 0x01000F98, 0x08000F99, 0x01000FBD, 0x03000FBE,
    0x01000FC0, 0x08000FC6, 0x01000FC7, 0x04000FD0, 0x03000FD2, 0x04000FD3, 0x01000FD4, 0x0E000FD9,
    0x01000FDB, 0x0800102B, 0x0100103F, 0x1C001040, 0x0300104A, 0x0100104C, 0x08001056, 0x0100105A,
    0x0800105E, 0x01001061, 0x08001062, 0x01001065, 0x08001067, 0x0100106E, 0x08001071, 0x01001075,
    0x08001082, 0x0100108E, 0x0800108F, 0x1C001090, 0x0800109A, 0x0100109E, 0x16001100, 0x18001160,
    0x170011A8, 0x01001200, 0x0800135D, 0x01001360, 0x03001361, 0x01001362, 0x03001400, 0x01001401,
    0x03001680, 0x01001681, 0x1D00169B, 0x0700169C, 0x0100169D, 0x030016EB, 0x010016EE, 0x08001712,
    0x01001715, 0x08001732, 0x03001735, 0x01001737, 0x08001752, 0x01001754, 0x08001772, 0x01001774,
    0x080017B4, 0x030017D4, 0x1B0017D6, 0x010017D7, 0x030017D8, 0x010017D9, 0x030017DA, 0x1F0017DB,
    0x010017DC, 0x080017DD, 0x010017DE, 0x1C0017E0, 0x010017EA, 0x0D001802, 0x03001804, 0x04001806,
    0x01001807, 0x0D001808, 0x0100180A, 0x0800180B, 0x0E00180E, 0x0100180F, 0x1C001810, 0x0100181A,
    0x08001885, 0x01001887, 0x080018A9, 0x010018AA, 0x08001920, 0x0100192C, 0x08001930, 0x0100193C,
    0x0D001944, 0x1C001946, 0x01001950, 0x1C0019D0, 0x010019DA, 0x08001A17, 0x01001A1C, 0x08001A55,
    0x01001A5F, 0x08001A60, 0x01001A7D, 0x08001A7F, 0x1C001A80, 0x01001A8A, 0x1C001A90, 0x01001A9A,
    0x08001AB0, 0x01001AC1, 0x08001B00, 0x01001B05, 0x08001B34, 0x01001B45, 0x1C001B50, 0x03001B5A,
    0x01001B5C, 0x03001B5D, 0x01001B61, 0x08001B6B, 0x01001B74, 0x08001B80, 0x01001B83, 0x08001BA1,
    0x01001BAE, 0x1C001BB0, 0x01001BBA, 0x08001BE6, 0x01001BF4, 0x08001C24, 0x01001C38, 0x03001C3B,
    0x1C001C40, 0x01001C4A, 0x1C001C50, 0x01001C5A, 0x03001C7E, 0x01001C80, 0x08001CD0, 0x01001CD3,
    0x08001CD4, 0x01001CE9, 0x08001CED, 0x01001CEE, 0x08001CF4, 0x01001CF5, 0x08001CF7, 0x01001CFA,
    0x08001DC0, 0x01001DFA, 0x08001DFB, 0x01001E00, 0x04001FFD, 0x01001FFE, 0x03002000, 0x0E002007,
    0x03002008, 0x2500200B, 0x0800200C, 0x2600200D, 0x0800200E, 0x03002010, 0x0E002011, 0x03002012,
    0x02002014, 0x01002015, 0x20002018, 0x1D00201A, 0x2000201B, 0x1D00201E, 0x2000201F, 0x01002020,
    0x14002024, 0x03002027, 0x05002028, 0x0800202A, 0x0E00202F, 0x1E002030, 0x01002038, 0x20002039,
    0x0100203B, 0x1B00203C, 0x0100203E, 0x15002044, 0x1D002045, 0x07002046, 0x1B002047, 0x0100204A,
    0x03002056, 0x01002057, 0x03002058, 0x0100205C, 0x0300205D, 0x24002060, 0x01002061, 0x08002066,
    0x01002070, 0x1D00207D, 0x0700207E, 0x0100207F, 0x1D00208D, 0x0700208E, 0x0100208F, 0x1F0020A0,
    0x1E0020A7, 0x1F0020A8, 0x1E0020B6, 0x1F0020B7, 0x1E0020BB, 0x1F0020BC, 0x1E0020BE, 0x1F0020BF,
    0x080020D0, 0x010020F1, 0x1E002103, 0x01002104, 0x1E002109, 0x0100210A, 0x1F002116, 0x01002117,
    0x1F002212, 0x01002214, 0x140022EF, 0x010022F0, 0x1D002308, 0x07002309, 0x1D00230A, 0x0700230B,
    0x0100230C, 0x1300231A, 0x0100231C, 0x1D002329, 0x0700232A, 0x0100232B, 0x130023F0, 0x010023F4,
    0x13002600, 0x01002604, 0x13002614, 0x01002616, 0x13002618, 0x01002619, 0x1300261A, 0x0B00261D,
    0x1300261E, 0x01002620, 0x13002639, 0x0100263C, 0x13002668, 0x01002669, 0x1300267F, 0x01002680,
    0x130026BD, 0x010026C9, 0x130026CD, 0x010026CE, 0x130026CF, 0x010026D2, 0x130026D3, 0x010026D5,
    0x130026D8, 0x010026DA, 0x130026DC, 0x010026DD, 0x130026DF, 0x010026E2, 0x130026EA, 0x010026EB,
    0x130026F1, 0x010026F6, 0x130026F7, 0x0B0026F9, 0x130026FA, 0x010026FB, 0x130026FD, 0x01002705,
    0x13002708, 0x0B00270A, 0x0100270E, 0x2000275B, 0x01002761, 0x0D002762, 0x13002764, 0x01002765,
    0x1D002768, 0x07002769, 0x1D00276A, 0x0700276B, 0x1D00276C, 0x0700276D, 0x1D00276E, 0x0700276F,
    0x1D002770, 0x07002771, 0x1D002772, 0x07002773, 0x1D002774, 0x07002775, 0x01002776, 0x1D0027C5,
    0x070027C6, 0x010027C7, 0x1D0027E6, 0x070027E7, 0x1D0027E8, 0x070027E9, 0x1D0027EA, 0x070027EB,
    0x1D0027EC, 0x070027ED, 0x1D0027EE, 0x070027EF, 0x010027F0, 0x1D002983, 0x07002984, 0x1D002985,
    0x07002986, 0x1D002987, 0x07002988, 0x1D002989, 0x0700298A, 0x1D00298B, 0x0700298C, 0x1D00298D,
    0x0700298E, 0x1D00298F, 0x07002990, 0x1D002991, 0x07002992, 0x1D002993, 0x07002994, 0x1D002995,
    0x07002996, 0x1D002997, 0x07002998, 0x01002999, 0x1D0029D8, 0x070029D9, 0x1D0029DA, 0x070029DB,
    0x010029DC, 0x1D0029FC, 0x070029FD, 0x010029FE, 0x08002CEF, 0x01002CF2, 0x0D002CF9, 0x03002CFA,
    0x01002CFD, 0x0D002CFE, 0x03002CFF, 0x01002D00, 0x03002D70, 0x01002D71, 0x08002D7F, 0x01002D80,
    0x08002DE0, 0x20002E00, 0x03002E0E, 0x01002E16, 0x03002E17, 0x1D002E18, 0x03002E19, 0x01002E1A,
    0x20002E1C, 0x01002E1E, 0x20002E20, 0x1D002E22, 0x07002E23, 0x1D002E24, 0x07002E25, 0x1D002E26,
    0x07002E27, 0x1D002E28, 0x07002E29, 0x03002E2A, 0x0D002E2E, 0x01002E2F, 0x03002E30, 0x01002E32,
    0x03002E33, 0x01002E35, 0x02002E3A, 0x03002E3C, 0x01002E3F, 0x03002E40, 0x1D002E42, 0x03002E43,
    0x01002E4B, 0x03002E4C, 0x01002E4D, 0x03002E4E, 0x01002E50, 0x13002E80, 0x01002E9A, 0x13002E9B,
    0x01002EF4, 0x13002F00, 0x01002FD6, 0x13002FF0, 0x01002FFC, 0x03003000, 0x07003001, 0x13003003,
    0x1B003005, 0x13003006, 0x1D003008, 0x07003009, 0x1D00300A, 0x0700300B, 0x1D00300C, 0x0700300D,
    0x1D00300E, 0x0700300F, 0x1D003010, 0x07003011, 0x13003012, 0x1D003014, 0x07003015, 0x1D003016,
    0x07003017, 0x1D003018, 0x07003019, 0x1D00301A, 0x0700301B, 0x1B00301C, 0x1D00301D, 0x0700301E,
    0x13003020, 0x0800302A, 0x13003030, 0x08003035, 0x13003036, 0x1B00303B, 0x1300303D, 0x01003040,
    0x1B003041, 0x13003042, 0x1B003043, 0x13003044, 0x1B003045, 0x13003046, 0x1B003047, 0x13003048,
    0x1B003049, 0x1300304A, 0x1B003063, 0x13003064, 0x1B003083, 0x13003084, 0x1B003085, 0x13003086,
    0x1B003087, 0x13003088, 0x1B00308E, 0x1300308F, 0x1B003095, 0x01003097, 0x08003099, 0x1B00309B,
    0x1300309F, 0x1B0030A0, 0x130030A2, 0x1B0030A3, 0x130030A4, 0x1B0030A5, 0x130030A6, 0x1B0030A7,
    0x130030A8, 0x1B0030A9, 0x130030AA, 0x1B0030C3, 0x130030C4, 0x1B0030E3, 0x130030E4, 0x1B0030E5,
    0x130030E6, 0x1B0030E7, 0x130030E8, 0x1B0030EE, 0x130030EF, 0x1B0030F5, 0x130030F7, 0x1B0030FB,
    0x130030FF, 0x01003100, 0x13003105, 0x01003130, 0x13003131, 0x0100318F, 0x13003190, 0x010031E4,
    0x1B0031F0, 0x13003200, 0x0100321F, 0x13003220, 0x01003248, 0x13003250, 0x01004DC0, 0x13004E00,
    0x1B00A015, 0x1300A016, 0x0100A48D, 0x1300A490, 0x0100A4C7, 0x0300A4FE, 0x0100A500, 0x0300A60D,
    0x0D00A60E, 0x0300A60F, 0x0100A610, 0x1C00A620, 0x0100A62A, 0x0800A66F, 0x0100A673, 0x0800A674,
    0x0100A67E, 0x0800A69E, 0x0100A6A0, 0x0800A6F0, 0x0100A6F2, 0x0300A6F3, 0x0100A6F8, 0x0800A802,
    0x0100A803, 0x0800A806, 0x0100A807, 0x0800A80B, 0x0100A80C, 0x0800A823, 0x0100A828, 0x0800A82C,
    0x0100A82D, 0x1E00A838, 0x0100A839, 0x0400A874, 0x0D00A876, 0x0100A878, 0x0800A880, 0x0100A882,
    0x0800A8B4, 0x0100A8C6, 0x0300A8CE, 0x1C00A8D0, 0x0100A8DA, 0x0800A8E0, 0x0100A8F2, 0x0400A8FC,
    0x0100A8FD, 0x0800A8FF, 0x1C00A900, 0x0100A90A, 0x0800A926, 0x0300A92E, 0x0100A930, 0x0800A947,
    0x0100A954, 0x1600A960, 0x0100A97D, 0x0800A980, 0x0100A984, 0x0800A9B3, 0x0100A9C1, 0x0300A9C7,
    0x0100A9CA, 0x1C00A9D0, 0x0100A9DA, 0x0800A9E5, 0x0100A9E6, 0x1C00A9F0, 0x0100A9FA, 0x0800AA29,
    0x0100AA37, 0x0800AA43, 0x0100AA44, 0x0800AA4C, 0x0100AA4E, 0x1C00AA50, 0x0100AA5A, 0x0300AA5D,
    0x0100AA60, 0x0800AA7B, 0x0100AA7E, 0x0800AAB0, 0x0100AAB1, 0x0800AAB2, 0x0100AAB5, 0x0800AAB7,
    0x0100AAB9, 0x0800AABE, 0x0100AAC0, 0x0800AAC1, 0x0100AAC2, 0x0800AAEB, 0x0300AAF0, 0x0100AAF2,
    0x0800AAF5, 0x0100AAF7, 0x0800ABE3, 0x0300ABEB, 0x0800ABEC, 0x0100ABEE, 0x1C00ABF0, 0x0100ABFA,
    0x0F00AC00, 0x1000AC01, 0x0F00AC1C, 0x1000AC1D, 0x0F00AC38, 0x1000AC39, 0x0F00AC54, 0x1000AC55,
    0x0F00AC70, 0x1000AC71, 0x0F00AC8C, 0x1000AC8D, 0x0F00ACA8, 0x1000ACA9, 0x0F00ACC4, 0x1000ACC5,
    0x0F00ACE0, 0x1000ACE1, 0x0F00ACFC, 0x1000ACFD, 0x0F00AD18, 0x1000AD19, 0x0F00AD34, 0x1000AD35,
    0x0F00AD50, 0x1000AD51, 0x0F00AD6C, 0x1000AD6D, 0x0F00AD88, 0x1000AD89, 0x0F00ADA4, 0x1000ADA5,
    0x0F00ADC0, 0x1000ADC1, 0x0F00ADDC, 0x1000ADDD, 0x0F00ADF8, 0x1000ADF9, 0x0F00AE14, 0x1000AE15,
    0x0F00AE30, 0x1000AE31, 0x0F00AE4C, 0x1000AE4D, 0x0F00AE68, 0x1000AE69, 0x0F00AE84, 0x1000AE85,
    0x0F00AEA0, 0x1000AEA1, 0x0F00AEBC, 0x1000AEBD, 0x0F00AED8, 0x1000AED9, 0x0F00AEF4, 0x1000AEF5,
    0x0F00AF10, 0x1000AF11, 0x0F00AF2C, 0x1000AF2D, 0x0F00AF48, 0x1000AF49, 0x0F00AF64, 0x1000AF65,
    0x0F00AF80, 0x1000AF81, 0x0F00AF9C, 0x1000AF9D, 0x0F00AFB8, 0x1000AFB9, 0x0F00AFD4, 0x1000AFD5,
    0x0F00AFF0, 0x1000AFF1, 0x0F00B00C, 0x1000B00D, 0x0F00B028, 0x1000B029, 0x0F00B044, 0x1000B045,
    0x0F00B060, 0x1000B061, 0x0F00B07C, 0x1000B07D, 0x0F00B098, 0x1000B099, 0x0F00B0B4, 0x1000B0B5,
    0x0F00B0D0, 0x1000B0D1, 0x0F00B0EC, 0x1000B0ED, 0x0F00B108, 0x1000B109, 0x0F00B124, 0x1000B125,
    0x0F00B140, 0x1000B141, 0x0F00B15C, 0x1000B15D, 0x0F00B178, 0x1000B179, 0x0F00B194, 0x1000B195,
    0x0F00B1B0, 0x1000B1B1, 0x0F00B1CC, 0x1000B1CD, 0x0F00B1E8, 0x1000B1E9, 0x0F00B204, 0x1000B205,
    0x0F00B220, 0x1000B221, 0x0F00B23C, 0x1000B23D, 0x0F00B258, 0x1000B259, 0x0F00B274, 0x1000B275,
    0x0F00B290, 0x1000B291, 0x0F00B2AC, 0x1000B2AD, 0x0F00B2C8, 0x1000B2C9, 0x0F00B2E4, 0x1000B2E5,
    0x0F00B300, 0x1000B301, 0x0F00B31C, 0x1000B31D, 0x0F00B338, 0x1000B339, 0x0F00B354, 0x1000B355,
    0x0F00B370, 0x1000B371, 0x0F00B38C, 0x1000B38D, 0x0F00B3A8, 0x1000B3A9, 0x0F00B3C4, 0x1000B3C5,
    0x0F00B3E0, 0x1000B3E1, 0x0F00B3FC, 0x1000B3FD, 0x0F00B418, 0x1000B419, 0x0F00B434, 0x1000B435,
    0x0F00B450, 0x1000B451, 0x0F00B46C, 0x1000B46D, 0x0F00B488, 0x1000B489, 0x0F00B4A4, 0x1000B4A5,
    0x0F00B4C0, 0x1000B4C1, 0x0F00B4DC, 0x1000B4DD, 0x0F00B4F8, 0x1000B4F9, 0x0F00B514, 0x1000B515,
    0x0F00B530, 0x1000B531, 0x0F00B54C, 0x1000B54D, 0x0F00B568, 0x1000B569, 0x0F00B584, 0x1000B585,
    0x0F00B5A0, 0x1000B5A1, 0x0F00B5BC, 0x1000B5BD, 0x0F00B5D8, 0x1000B5D9, 0x0F00B5F4, 0x1000B5F5,
    0x0F00B610, 0x1000B611, 0x0F00B62C, 0x1000B62D, 0x0F00B648, 0x1000B649, 0x0F00B664, 0x1000B665,
    0x0F00B680, 0x1000B681, 0x0F00B69C, 0x1000B69D, 0x0F00B6B8, 0x1000B6B9, 0x0F00B6D4, 0x1000B6D5,
    0x0F00B6F0, 0x1000B6F1, 0x0F00B70C, 0x1000B70D, 0x0F00B728, 0x1000B729, 0x0F00B744, 0x1000B745,
    0x0F00B760, 0x1000B761, 0x0F00B77C, 0x1000B77D, 0x0F00B798, 0x1000B799, 0x0F00B7B4, 0x1000B7B5,
    0x0F00B7D0, 0x1000B7D1, 0x0F00B7EC, 0x1000B7ED, 0x0F00B808, 0x1000B809, 0x0F00B824, 0x1000B825,
    0x0F00B840, 0x1000B841, 0x0F00B85C, 0x1000B85D, 0x0F00B878, 0x1000B879, 0x0F00B894, 0x1000B895,
    0x0F00B8B0, 0x1000B8B1, 0x0F00B8CC, 0x1000B8CD, 0x0F00B8E8, 0x1000B8E9, 0x0F00B904, 0x1000B905,
    0x0F00B920, 0x1000B921, 0x0F00B93C, 0x1000B93D, 0x0F00B958, 0x1000B959, 0x0F00B974, 0x1000B975,
    0x0F00B990, 0x1000B991, 0x0F00B9AC, 0x1000B9AD, 0x0F00B9C8, 0x1000B9C9, 0x0F00B9E4, 0x1000B9E5,
    0x0F00BA00, 0x1000BA01, 0x0F00BA1C, 0x1000BA1D, 0x0F00BA38, 0x1000BA39, 0x0F00BA54, 0x1000BA55,
    0x0F00BA70, 0x1000BA71, 0x0F00BA8C, 0x1000BA8D, 0x0F00BAA8, 0x1000BAA9, 0x0F00BAC4, 0x1000BAC5,
    0x0F00BAE0, 0x1000BAE1, 0x0F00BAFC, 0x1000BAFD, 0x0F00BB18, 0x1000BB19, 0x0F00BB34, 0x1000BB35,
    0x0F00BB50, 0x1000BB51, 0x0F00BB6C, 0x1000BB6D, 0x0F00BB88, 0x1000BB89, 0x0F00BBA4, 0x1000BBA5,
    0x0F00BBC0, 0x1000BBC1, 0x0F00BBDC, 0x1000BBDD, 0x0F00BBF8, 0x1000BBF9, 0x0F00BC14, 0x1000BC15,
    0x0F00BC30, 0x1000BC31, 0x0F00BC4C, 0x1000BC4D, 0x0F00BC68, 0x1000BC69, 0x0F00BC84, 0x1000BC85,
    0x0F00BCA0, 0x1000BCA1, 0x0F00BCBC, 0x1000BCBD, 0x0F00BCD8, 0x1000BCD9, 0x0F00BCF4, 0x1000BCF5,
    0x0F00BD10, 0x1000BD11, 0x0F00BD2C, 0x1000BD2D, 0x0F00BD48, 0x1000BD49, 0x0F00BD64, 0x1000BD65,
    0x0F00BD80, 0x1000BD81, 0x0F00BD9C, 0x1000BD9D, 0x0F00BDB8, 0x1000BDB9, 0x0F00BDD4, 0x1000BDD5,
    0x0F00BDF0, 0x1000BDF1, 0x0F00BE0C, 0x1000BE0D, 0x0F00BE28, 0x1000BE29, 0x0F00BE44, 0x1000BE45,
    0x0F00BE60, 0x1000BE61, 0x0F00BE7C, 0x1000BE7D, 0x0F00BE98, 0x1000BE99, 0x0F00BEB4, 0x1000BEB5,
    0x0F00BED0, 0x1000BED1, 0x0F00BEEC, 0x1000BEED, 0x0F00BF08, 0x1000BF09, 0x0F00BF24, 0x1000BF25,
    0x0F00BF40, 0x1000BF41, 0x0F00BF5C, 0x1000BF5D, 0x0F00BF78, 0x1000BF79, 0x0F00BF94, 0x1000BF95,
    0x0F00BFB0, 0x1000BFB1, 0x0F00BFCC, 0x1000BFCD, 0x0F00BFE8, 0x1000BFE9, 0x0F00C004, 0x1000C005,
    0x0F00C020, 0x1000C021, 0x0F00C03C, 0x1000C03D, 0x0F00C058, 0x1000C059, 0x0F00C074, 0x1000C075,
    0x0F00C090, 0x1000C091, 0x0F00C0AC, 0x1000C0AD, 0x0F00C0C8, 0x1000C0C9, 0x0F00C0E4, 0x1000C0E5,
    0x0F00C100, 0x1000C101, 0x0F00C11C, 0x1000C11D, 0x0F00C138, 0x1000C139, 0x0F00C154, 0x1000C155,
    0x0F00C170, 0x1000C171, 0x0F00C18C, 0x1000C18D, 0x0F00C1A8, 0x1000C1A9, 0x0F00C1C4, 0x1000C1C5,
    0x0F00C1E0, 0x1000C1E1, 0x0F00C1FC, 0x1000C1FD, 0x0F00C218, 0x1000C219, 0x0F00C234, 0x1000C235,
    0x0F00C250, 0x1000C251, 0x0F00C26C, 0x1000C26D, 0x0F00C288, 0x1000C289, 0x0F00C2A4, 0x1000C2A5,
    0x0F00C2C0, 0x1000C2C1, 0x0F00C2DC, 0x1000C2DD, 0x0F00C2F8, 0x1000C2F9, 0x0F00C314, 0x1000C315,
    0x0F00C330, 0x1000C331, 0x0F00C34C, 0x1000C34D, 0x0F00C368, 0x1000C369, 0x0F00C384, 0x1000C385,
    0x0F00C3A0, 0x1000C3A1, 0x0F00C3BC, 0x1000C3BD, 0x0F00C3D8, 0x1000C3D9, 0x0F00C3F4, 0x1000C3F5,
    0x0F00C410, 0x1000C411, 0x0F00C42C, 0x1000C42D, 0x0F00C448, 0x1000C449, 0x0F00C464, 0x1000C465,
    0x0F00C480, 0x1000C481, 0x0F00C49C, 0x1000C49D, 0x0F00C4B8, 0x1000C4B9, 0x0F00C4D4, 0x1000C4D5,
    0x0F00C4F0, 0x1000C4F1, 0x0F00C50C, 0x1000C50D, 0x0F00C528, 0x1000C529, 0x0F00C544, 0x1000C545,
    0x0F00C560, 0x1000C561, 0x0F00C57C, 0x1000C57D, 0x0F00C598, 0x1000C599, 0x0F00C5B4, 0x1000C5B5,
    0x0F00C5D0, 0x1000C5D1, 0x0F00C5EC, 0x1000C5ED, 0x0F00C608, 0x1000C609, 0x0F00C624, 0x1000C625,
    0x0F00C640, 0x1000C641, 0x0F00C65C, 0x1000C65D, 0x0F00C678, 0x1000C679, 0x0F00C694, 0x1000C695,
    0x0F00C6B0, 0x1000C6B1, 0x0F00C6CC, 0x1000C6CD, 0x0F00C6E8, 0x1000C6E9, 0x0F00C704, 0x1000C705,
    0x0F00C720, 0x1000C721, 0x0F00C73C, 0x1000C73D, 0x0F00C758, 0x1000C759, 0x0F00C774, 0x1000C775,
    0x0F00C790, 0x1000C791, 0x0F00C7AC, 0x1000C7AD, 0x0F00C7C8, 0x1000C7C9, 0x0F00C7E4, 0x1000C7E5,
    0x0F00C800, 0x1000C801, 0x0F00C81C, 0x1000C81D, 0x0F00C838, 0x1000C839, 0x0F00C854, 0x1000C855,
    0x0F00C870, 0x1000C871, 0x0F00C88C, 0x1000C88D, 0x0F00C8A8, 0x1000C8A9, 0x0F00C8C4, 0x1000C8C5,
    0x0F00C8E0, 0x1000C8E1, 0x0F00C8FC, 0x1000C8FD, 0x0F00C918, 0x1000C919, 0x0F00C934, 0x1000C935,
    0x0F00C950, 0x1000C951, 0x0F00C96C, 0x1000C96D, 0x0F00C988, 0x1000C989, 0x0F00C9A4, 0x1000C9A5,
    0x0F00C9C0, 0x1000C9C1, 0x0F00C9DC, 0x1000C9DD, 0x0F00C9F8, 0x1000C9F9, 0x0F00CA14, 0x1000CA15,
    0x0F00CA30, 0x1000CA31, 0x0F00CA4C, 0x1000CA4D, 0x0F00CA68, 0x1000CA69, 0x0F00CA84, 0x1000CA85,
    0x0F00CAA0, 0x1000CAA1, 0x0F00CABC, 0x1000CABD, 0x0F00CAD8, 0x1000CAD9, 0x0F00CAF4, 0x1000CAF5,
    0x0F00CB10, 0x1000CB11, 0x0F00CB2C, 0x1000CB2D, 0x0F00CB48, 0x1000CB49, 0x0F00CB64, 0x1000CB65,
    0x0F00CB80, 0x1000CB81, 0x0F00CB9C, 0x1000CB9D, 0x0F00CBB8, 0x1000CBB9, 0x0F00CBD4, 0x1000CBD5,
    0x0F00CBF0, 0x1000CBF1, 0x0F00CC0C, 0x1000CC0D, 0x0F00CC28, 0x1000CC29, 0x0F00CC44, 0x1000CC45,
    0x0F00CC60, 0x1000CC61, 0x0F00CC7C, 0x1000CC7D, 0x0F00CC98, 0x1000CC99, 0x0F00CCB4, 0x1000CCB5,
    0x0F00CCD0, 0x1000CCD1, 0x0F00CCEC, 0x1000CCED, 0x0F00CD08, 0x1000CD09, 0x0F00CD24, 0x1000CD25,
    0x0F00CD40, 0x1000CD41, 0x0F00CD5C, 0x1000CD5D, 0x0F00CD78, 0x1000CD79, 0x0F00CD94, 0x1000CD95,
    0x0F00CDB0, 0x1000CDB1, 0x0F00CDCC, 0x1000CDCD, 0x0F00CDE8, 0x1000CDE9, 0x0F00CE04, 0x1000CE05,
    0x0F00CE20, 0x1000CE21, 0x0F00CE3C, 0x1000CE3D, 0x0F00CE58, 0x1000CE59, 0x0F00CE74, 0x1000CE75,
    0x0F00CE90, 0x1000CE91, 0x0F00CEAC, 0x1000CEAD, 0x0F00CEC8, 0x1000CEC9, 0x0F00CEE4, 0x1000CEE5,
    0x0F00CF00, 0x1000CF01, 0x0F00CF1C, 0x1000CF1D, 0x0F00CF38, 0x1000CF39, 0x0F00CF54, 0x1000CF55,
    0x0F00CF70, 0x1000CF71, 0x0F00CF8C, 0x1000CF8D, 0x0F00CFA8, 0x1000CFA9, 0x0F00CFC4, 0x1000CFC5,
    0x0F00CFE0, 0x1000CFE1, 0x0F00CFFC, 0x1000CFFD, 0x0F00D018, 0x1000D019, 0x0F00D034, 0x1000D035,
    0x0F00D050, 0x1000D051, 0x0F00D06C, 0x1000D06D, 0x0F00D088, 0x1000D089, 0x0F00D0A4, 0x1000D0A5,
    0x0F00D0C0, 0x1000D0C1, 0x0F00D0DC, 0x1000D0DD, 0x0F00D0F8, 0x1000D0F9, 0x0F00D114, 0x1000D115,
    0x0F00D130, 0x1000D131, 0x0F00D14C, 0x1000D14D, 0x0F00D168, 0x1000D169, 0x0F00D184, 0x1000D185,
    0x0F00D1A0, 0x1000D1A1, 0x0F00D1BC, 0x1000D1BD, 0x0F00D1D8, 0x1000D1D9, 0x0F00D1F4, 0x1000D1F5,
    0x0F00D210, 0x1000D211, 0x0F00D22C, 0x1000D22D, 0x0F00D248, 0x1000D249, 0x0F00D264, 0x1000D265,
    0x0F00D280, 0x1000D281, 0x0F00D29C, 0x1000D29D, 0x0F00D2B8, 0x1000D2B9, 0x0F00D2D4, 0x1000D2D5,
    0x0F00D2F0, 0x1000D2F1, 0x0F00D30C, 0x1000D30D, 0x0F00D328, 0x1000D329, 0x0F00D344, 0x1000D345,
    0x0F00D360, 0x1000D361, 0x0F00D37C, 0x1000D37D, 0x0F00D398, 0x1000D399, 0x0F00D3B4, 0x1000D3B5,
    0x0F00D3D0, 0x1000D3D1, 0x0F00D3EC, 0x1000D3ED, 0x0F00D408, 0x1000D409, 0x0F00D424, 0x1000D425,
    0x0F00D440, 0x1000D441, 0x0F00D45C, 0x1000D45D, 0x0F00D478, 0x1000D479, 0x0F00D494, 0x1000D495,
    0x0F00D4B0, 0x1000D4B1, 0x0F00D4CC, 0x1000D4CD, 0x0F00D4E8, 0x1000D4E9, 0x0F00D504, 0x1000D505,
    0x0F00D520, 0x1000D521, 0x0F00D53C, 0x1000D53D, 0x0F00D558, 0x1000D559, 0x0F00D574, 0x1000D575,
    0x0F00D590, 0x1000D591, 0x0F00D5AC, 0x1000D5AD, 0x0F00D5C8, 0x1000D5C9, 0x0F00D5E4, 0x1000D5E5,
    0x0F00D600, 0x1000D601, 0x0F00D61C, 0x1000D61D, 0x0F00D638, 0x1000D639, 0x0F00D654, 0x1000D655,
    0x0F00D670, 0x1000D671, 0x0F00D68C, 0x1000D68D, 0x0F00D6A8, 0x1000D6A9, 0x0F00D6C4, 0x1000D6C5,
    0x0F00D6E0, 0x1000D6E1, 0x0F00D6FC, 0x1000D6FD, 0x0F00D718, 0x1000D719, 0x0F00D734, 0x1000D735,
    0x0F00D750, 0x1000D751, 0x0F00D76C, 0x1000D76D, 0x0F00D788, 0x1000D789, 0x0100D7A4, 0x1800D7B0,
    0x0100D7C7, 0x1700D7CB, 0x0100D7FC, 0x1300F900, 0x0100FB00, 0x1100FB1D, 0x0800FB1E, 0x1100FB1F,
    0x0100FB29, 0x1100FB2A, 0x0100FB37, 0x1100FB38, 0x0100FB3D, 0x1100FB3E, 0x0100FB3F, 0x1100FB40,
    0x0100FB42, 0x1100FB43, 0x0100FB45, 0x1100FB46, 0x0100FB50, 0x0700FD3E, 0x1D00FD3F, 0x0100FD40,
    0x1E00FDFC, 0x0100FDFD, 0x0800FE00, 0x1500FE10, 0x0700FE11, 0x1500FE13, 0x0D00FE15, 0x1D00FE17,
    0x0700FE18, 0x1400FE19, 0x0100FE1A, 0x0800FE20, 0x1300FE30, 0x1D00FE35, 0x0700FE36, 0x1D00FE37,
    0x0700FE38, 0x1D00FE39, 0x0700FE3A, 0x1D00FE3B, 0x0700FE3C, 0x1D00FE3D, 0x0700FE3E, 0x1D00FE3F,
    0x0700FE40, 0x1D00FE41, 0x0700FE42, 0x1D00FE43, 0x0700FE44, 0x1300FE45, 0x1D00FE47, 0x0700FE48,
    0x1300FE49, 0x0700FE50, 0x1300FE51, 0x0700FE52, 0x0100FE53, 0x1B00FE54, 0x0D00FE56, 0x1300FE58,
    0x1D00FE59, 0x0700FE5A, 0x1D00FE5B, 0x0700FE5C, 0x1D00FE5D, 0x0700FE5E, 0x1300FE5F, 0x0100FE67,
    0x1300FE68, 0x1F00FE69, 0x1E00FE6A, 0x1300FE6B, 0x0100FE6C, 0x2400FEFF, 0x0100FF00, 0x0D00FF01,
    0x1300FF02, 0x1F00FF04, 0x1E00FF05, 0x1300FF06, 0x1D00FF08, 0x0700FF09, 0x1300FF0A, 0x0700FF0C,
    0x1300FF0D, 0x0700FF0E, 0x1300FF0F, 0x1B00FF1A, 0x1300FF1C, 0x0D00FF1F, 0x1300FF20, 0x1D00FF3B,
    0x1300FF3C, 0x0700FF3D, 0x1300FF3E, 0x1D00FF5B, 0x1300FF5C, 0x0700FF5D, 0x1300FF5E, 0x1D00FF5F,
    0x0700FF60, 0x1D00FF62, 0x0700FF63, 0x1B00FF65, 0x1300FF66, 0x1B00FF67, 0x1300FF71, 0x1B00FF9E,
    0x1300FFA0, 0x0100FFBF, 0x1300FFC2, 0x0100FFC8, 0x1300FFCA, 0x0100FFD0, 0x1300FFD2, 0x0100FFD8,
    0x1300FFDA, 0x0100FFDD, 0x1E00FFE0, 0x1F00FFE1, 0x1300FFE2, 0x1F00FFE5, 0x0100FFE7, 0x0800FFF9,
    0x0600FFFC, 0x0100FFFD, 0x03010100, 0x01010103, 0x080101FD, 0x010101FE, 0x080102E0, 0x010102E1,
    0x08010376, 0x0101037B, 0x0301039F, 0x010103A0, 0x030103D0, 0x010103D1, 0x1C0104A0, 0x010104AA,
    0x03010857, 0x01010858, 0x0301091F, 0x01010920, 0x08010A01, 0x01010A04, 0x08010A05, 0x01010A07,
    0x08010A0C, 0x01010A10, 0x08010A38, 0x01010A3B, 0x08010A3F, 0x01010A40, 0x03010A50, 0x01010A58,
    0x08010AE5, 0x01010AE7, 0x03010AF0, 0x14010AF6, 0x01010AF7, 0x03010B39, 0x01010B40, 0x08010D24,
    0x01010D28, 0x1C010D30, 0x01010D3A, 0x08010EAB, 0x03010EAD, 0x01010EAE, 0x08010F46, 0x01010F51,
    0x08011000, 0x01011003, 0x08011038, 0x03011047, 0x01011049, 0x1C011066, 0x01011070, 0x0801107F,
    0x01011083, 0x080110B0, 0x010110BB, 0x030110BE, 0x010110C2, 0x1C0110F0, 0x010110FA, 0x08011100,
    0x01011103, 0x08011127, 0x01011135, 0x1C011136, 0x03011140, 0x01011144, 0x08011145, 0x01011147,
    0x08011173, 0x01011174, 0x04011175, 0x01011176, 0x08011180, 0x01011183, 0x080111B3, 0x010111C1,
    0x030111C5, 0x010111C7, 0x030111C8, 0x080111C9, 0x010111CD, 0x080111CE, 0x1C0111D0, 0x010111DA,
    0x040111DB, 0x010111DC, 0x030111DD, 0x010111E0, 0x0801122C, 0x03011238, 0x0101123A, 0x0301123B,
    0x0101123D, 0x0801123E, 0x0101123F, 0x030112A9, 0x010112AA, 0x080112DF, 0x010112EB, 0x1C0112F0,
    0x010112FA, 0x08011300, 0x01011304, 0x0801133B, 0x0101133D, 0x0801133E, 0x01011345, 0x08011347,
    0x01011349, 0x0801134B, 0x0101134E, 0x08011357, 0x01011358, 0x08011362, 0x01011364, 0x08011366,
    0x0101136D, 0x08011370, 0x01011375, 0x08011435, 0x01011447, 0x0301144B, 0x0101144F, 0x1C011450,
    0x0301145A, 0x0101145C, 0x0801145E, 0x0101145F, 0x080114B0, 0x010114C4, 0x1C0114D0, 0x010114DA,
    0x080115AF, 0x010115B6, 0x080115B8, 0x040115C1, 0x030115C2, 0x0D0115C4, 0x010115C6, 0x030115C9,
    0x010115D8, 0x080115DC, 0x010115DE, 0x08011630, 0x03011641, 0x01011643, 0x1C011650, 0x0101165A,
    0x04011660, 0x0101166D, 0x080116AB, 0x010116B8, 0x1C0116C0, 0x010116CA, 0x0801171D, 0x0101172C,
    0x1C011730, 0x0101173A, 0x0301173C, 0x0101173F, 0x0801182C, 0x0101183B, 0x1C0118E0, 0x010118EA,
    0x08011930, 0x01011936, 0x08011937, 0x01011939, 0x0801193B, 0x0101193F, 0x08011940, 0x01011941,
    0x08011942, 0x03011944, 0x01011947, 0x1C011950, 0x0101195A, 0x080119D1, 0x010119D8, 0x080119DA,
    0x010119E1, 0x040119E2, 0x010119E3, 0x080119E4, 0x010119E5, 0x08011A01, 0x01011A0B, 0x08011A33,
    0x01011A3A, 0x08011A3B, 0x04011A3F, 0x01011A40, 0x03011A41, 0x04011A45, 0x01011A46, 0x08011A47,
    0x01011A48, 0x08011A51, 0x01011A5C, 0x08011A8A, 0x03011A9A, 0x01011A9D, 0x04011A9E, 0x03011AA1,
    0x01011AA3, 0x08011C2F, 0x01011C37, 0x08011C38, 0x01011C40, 0x03011C41, 0x01011C46, 0x1C011C50,
    0x01011C5A, 0x04011C70, 0x0D011C71, 0x01011C72, 0x08011C92, 0x01011CA8, 0x08011CA9, 0x01011CB7,
    0x08011D31, 0x01011D37, 0x08011D3A, 0x01011D3B, 0x08011D3C, 0x01011D3E, 0x08011D3F, 0x01011D46,
    0x08011D47, 0x01011D48, 0x1C011D50, 0x01011D5A, 0x08011D8A, 0x01011D8F, 0x08011D90, 0x01011D92,
    0x08011D93, 0x01011D98, 0x1C011DA0, 0x01011DAA, 0x08011EF3, 0x01011EF7, 0x1E011FDD, 0x01011FE1,
    0x03011FFF, 0x01012000, 0x03012470, 0x01012475, 0x1D013258, 0x0701325B, 0x0101325E, 0x07013282,
    0x01013283, 0x1D013286, 0x07013287, 0x1D013288, 0x07013289, 0x0101328A, 0x1D013379, 0x0701337A,
    0x0101337C, 0x0E013430, 0x1D013437, 0x07013438, 0x01013439, 0x1D0145CE, 0x070145CF, 0x010145D0,
    0x1C016A60, 0x01016A6A, 0x03016A6E, 0x01016A70, 0x08016AF0, 0x03016AF5, 0x01016AF6, 0x08016B30,
    0x03016B37, 0x01016B3A, 0x03016B44, 0x01016B45, 0x1C016B50, 0x01016B5A, 0x03016E97, 0x01016E99,
    0x08016F4F, 0x01016F50, 0x08016F51, 0x01016F88, 0x08016F8F, 0x01016F93, 0x1B016FE0, 0x0E016FE4,
    0x01016FE5, 0x08016FF0, 0x01016FF2, 0x13017000, 0x010187F8, 0x13018800, 0x01018B00, 0x13018D00,
    0x01018D09, 0x1301B000, 0x0101B11F, 0x1B01B150, 0x0101B153, 0x1B01B164, 0x0101B168, 0x1301B170,
    0x0101B2FC, 0x0801BC9D, 0x0301BC9F, 0x0801BCA0, 0x0101BCA4, 0x0801D165, 0x0101D16A, 0x0801D16D,
    0x0101D183, 0x0801D185, 0x0101D18C, 0x0801D1AA, 0x0101D1AE, 0x0801D242, 0x0101D245, 0x1C01D7CE,
    0x0101D800, 0x0801DA00, 0x0101DA37, 0x0801DA3B, 0x0101DA6D, 0x0801DA75, 0x0101DA76, 0x0801DA84,
    0x0101DA85, 0x0301DA87, 0x0101DA8B, 0x0801DA9B, 0x0101DAA0, 0x0801DAA1, 0x0101DAB0, 0x0801E000,
    0x0101E007, 0x0801E008, 0x0101E019, 0x0801E01B, 0x0101E022, 0x0801E023, 0x0101E025, 0x0801E026,
    0x0101E02B, 0x0801E130, 0x0101E137, 0x1C01E140, 0x0101E14A, 0x0801E2EC, 0x1C01E2F0, 0x0101E2FA,
    0x1F01E2FF, 0x0101E300, 0x0801E8D0, 0x0101E8D7, 0x0801E944, 0x0101E94B, 0x1C01E950, 0x0101E95A,
    0x1D01E95E, 0x0101E960, 0x1E01ECAC, 0x0101ECAD, 0x1E01ECB0, 0x0101ECB1, 0x1301F000, 0x0101F100,
    0x1301F10D, 0x0101F110, 0x1301F16D, 0x0101F170, 0x1301F1AD, 0x2101F1E6, 0x1301F200, 0x0B01F385,
    0x1301F386, 0x0101F39C, 0x1301F39E, 0x0101F3B5, 0x1301F3B7, 0x0101F3BC, 0x1301F3BD, 0x0B01F3C2,
    0x1301F3C5, 0x0B01F3C7, 0x1301F3C8, 0x0B01F3CA, 0x1301F3CD, 0x0C01F3FB, 0x1301F400, 0x0B01F442,
    0x1301F444, 0x0B01F446, 0x1301F451, 0x0B01F466, 0x1301F479, 0x0B01F47C, 0x1301F47D, 0x0B01F481,
    0x1301F484, 0x0B01F485, 0x1301F488, 0x0B01F48F, 0x1301F490, 0x0B01F491, 0x1301F492, 0x0101F4A0,
    0x1301F4A1, 0x0101F4A2, 0x1301F4A3, 0x0101F4A4, 0x1301F4A5, 0x0B01F4AA, 0x1301F4AB, 0x0101F4AF,
    0x1301F4B0, 0x0101F4B1, 0x1301F4B3, 0x0101F500, 0x1301F507, 0x0101F517, 0x1301F525, 0x0101F532,
    0x1301F54A, 0x0B01F574, 0x1301F576, 0x0B01F57A, 0x1301F57B, 0x0B01F590, 0x1301F591, 0x0B01F595,
    0x1301F597, 0x0101F5D4, 0x1301F5DC, 0x0101F5F4, 0x1301F5FA, 0x0B01F645, 0x1301F648, 0x0B01F64B,
    0x0101F650, 0x2001F676, 0x1B01F679, 0x0101F67C, 0x1301F680, 0x0B01F6A3, 0x1301F6A4, 0x0B01F6B4,
    0x1301F6B7, 0x0B01F6C0, 0x1301F6C1, 0x0B01F6CC, 0x1301F6CD, 0x0101F700, 0x1301F774, 0x0101F780,
    0x1301F7D5, 0x0101F800, 0x1301F80C, 0x0101F810, 0x1301F848, 0x0101F850, 0x1301F85A, 0x0101F860,
    0x1301F888, 0x0101F890, 0x1301F8AE, 0x0101F900, 0x0B01F90C, 0x1301F90D, 0x0B01F90F, 0x1301F910,
    0x0B01F918, 0x1301F920, 0x0B01F926, 0x1301F927, 0x0B01F930, 0x1301F93A, 0x0B01F93C, 0x1301F93F,
    0x0B01F977, 0x1301F978, 0x0B01F9B5, 0x1301F9B7, 0x0B01F9B8, 0x1301F9BA, 0x0B01F9BB, 0x1301F9BC,
    0x0B01F9CD, 0x1301F9D0, 0x0B01F9D1, 0x1301F9DE, 0x0101FA00, 0x1301FA54, 0x0101FB00, 0x1C01FBF0,
    0x0101FBFA, 0x1301FC00, 0x0101FFFE, 0x13020000, 0x0102FFFE, 0x13030000, 0x0103FFFE, 0x080E0001,
    0x010E0002, 0x080E0020, 0x010E0080, 0x080E0100, 0x010E01F0,
};

// search routine (lower_bound)
auto get_class(char32_t cp) -> lbc {
    if (cp < 0x80) {
        return lotable[cp];
    } else if (cp >= 0xE01F0) {
        return lbc::AL;
    }
    std::size_t first = 0;
    std::size_t count = 2381;
    while (count > 0) {
        auto step = count / 2;
        auto it = first + step;
        if ((hitable[it] & 0x00ffffff) <= cp) {
            first = it + 1;
            count -= step + 1;
        } else {
            count = step;
        }
    }
    return static_cast<lbc>(hitable[first-1] >> 24);
}

auto context::calc_action(lbc n) -> lba {
    // pull currents state into local variables
    auto ca = curr_a;
    auto ce = curr_e;
    auto p = prev;
    auto psp = ce == lbc::SP ? p : ce;

    // consume the n into the fields for the
    // subsequent passes
    curr_a = n;
    if (n == lbc::SP && ce == lbc::SP) {
        // collapse multiple SP* into one SP
        // keep the current state unchanged
    } else if (n == lbc::CM || n == lbc::ZWJ) {
        // [LB9] and [LB10]
        if (ce == lbc::SOT || ce == lbc::SP || ce == lbc::ZW || ce == lbc::NL || ce == lbc::BK || ce == lbc::CR || ce == lbc::LF) {
            // [LB10]
            n = lbc::AL;
            curr_e = n;
        } else {
            return lba::forbid;
        }
    } else if (n == lbc::RI && ce == lbc::RI && p == lbc::RI) {
        // make sure even/odd matcher has the right outcome [LB30a]
        prev = lbc::AL;
    } else {
        // update state
        prev = ce;
        curr_e = n;
    }

    // note: the rules below refer only to the local vars
    // fetched from the state at the beginning of this method

    // rule LB28
    if ((ce == lbc::AL || ce == lbc::HL) && (n == lbc::AL || n == lbc::HL)) {
        return lba::forbid;
    }

    // rule LB2
    if (ca == lbc::SOT) {
        return lba::forbid;
    }

    // rule LB4
    if (ca == lbc::BK) {
        return lba::force;
    }

    // rule LB5.1
    if (ca == lbc::CR && n == lbc::LF) {
        return lba::forbid;
    }

    // rule LB5.2
    if (ca == lbc::CR || ca == lbc::LF || ca == lbc::NL) {
        return lba::force;
    }

    // rule LB6 and LB7
    if (n == lbc::BK || n == lbc::CR || n == lbc::LF || n == lbc::NL || n == lbc::SP || n == lbc::ZW) {
        return lba::forbid;
    }

    // rule LB8
    if (psp == lbc::ZW) {
        return lba::allow;
    }

    // rule LB8a
    if (ca == lbc::ZWJ) {
        return lba::forbid;
    }

    // rule LB11
    if (ce == lbc::WJ || n == lbc::WJ) {
        return lba::forbid;
    }

    // rule LB12
    if (ce == lbc::GL) {
        return lba::forbid;
    }

    // rule LB12a
    if (ce != lbc::SP && ce != lbc::BA && ce != lbc::HY && n == lbc::GL) {
        return lba::forbid;
    }

    // rule LB13
    if (n == lbc::CL || n == lbc::CP || n == lbc::EX || n == lbc::IS || n == lbc::SY) {
        return lba::forbid;
    }

    // rule LB14
    if (psp == lbc::OP) {
        return lba::forbid;
    }

    // rule LB15
    if (psp == lbc::QU && n == lbc::OP) {
        return lba::forbid;
    }

    // rule LB16
    if ((psp == lbc::CL || psp == lbc::CP) && n == lbc::NS) {
        return lba::forbid;
    }

    // rule LB17
    if (psp == lbc::B2 && n == lbc::B2) {
        return lba::forbid;
    }

    // rule LB18
    if (ce == lbc::SP) {
        return lba::allow;
    }

    // rule LB19
    if (ce == lbc::QU || n == lbc::QU) {
        return lba::forbid;
    }

    // rule LB20
    if (ce == lbc::CB || n == lbc::CB) {
        return lba::allow;
    }

    // rule LB21
    if (n == lbc::BA || n == lbc::HY || n == lbc::NS || ce == lbc::BB) {
        return lba::forbid;
    }

    // rule LB21a
    if (p == lbc::HL && (ce == lbc::HY || ce == lbc::BA)) {
        return lba::forbid;
    }

    // rule LB21b
    if (ce == lbc::SY && n == lbc::HL) {
        return lba::forbid;
    }

    // rule LB22
    if ((ce == lbc::AL || ce == lbc::HL || ce == lbc::EX || ce == lbc::ID || ce == lbc::EB || ce == lbc::EM || ce == lbc::IN || ce == lbc::NU) && n == lbc::IN) {
        return lba::forbid;
    }

    // rule LB23
    if (((ce == lbc::AL || ce == lbc::HL) && n == lbc::NU) || (ce == lbc::NU && (n == lbc::AL || n == lbc::HL))) {
        return lba::forbid;
    }

    // rule LB23a
    if ((ce == lbc::PR && (n == lbc::ID || n == lbc::EB || n == lbc::EM)) || ((ce == lbc::ID || ce == lbc::EB || ce == lbc::EM) && n == lbc::PO)) {
        return lba::forbid;
    }

    // rule LB24
    if (((ce == lbc::PR || ce == lbc::PO) && (n == lbc::AL || n == lbc::HL)) || ((ce == lbc::AL || ce == lbc::HL) && (n == lbc::PR || n == lbc::PO))) {
        return lba::forbid;
    }

    // rule LB25.1
    if ((ce == lbc::CL || ce == lbc::CP || ce == lbc::NU) && (n == lbc::PO || n == lbc::PR)) {
        return lba::forbid;
    }

    // rule LB25.2
    if ((ce == lbc::PO || ce == lbc::PR) && n == lbc::OP) {
        return lba::forbid;
    }

    // rule LB25.3
    if ((ce == lbc::HY || ce == lbc::IS || ce == lbc::SY || ce == lbc::PO || ce == lbc::PR || ce == lbc::NU) && n == lbc::NU) {
        return lba::forbid;
    }

    // rule LB26.1
    if (ce == lbc::JL && (n == lbc::JL || n == lbc::JV || n == lbc::H2 || n == lbc::H3)) {
        return lba::forbid;
    }

    // rule LB26.2
    if ((ce == lbc::JV || ce == lbc::H2) && (n == lbc::JV || n == lbc::JT)) {
        return lba::forbid;
    }

    // rule LB26.3
    if ((ce == lbc::JT || ce == lbc::H3) && n == lbc::JT) {
        return lba::forbid;
    }

    // rule LB27.1
    if ((ce == lbc::JL || ce == lbc::JV || ce == lbc::JT || ce == lbc::H2 || ce == lbc::H3) && (n == lbc::IN || n == lbc::PO)) {
        return lba::forbid;
    }

    // rule LB27.2
    if (ce == lbc::PR && (n == lbc::JL || n == lbc::JV || n == lbc::JT || n == lbc::H2 || n == lbc::H3)) {
        return lba::forbid;
    }

    // rule LB29
    if (ce == lbc::IS && (n == lbc::AL || n == lbc::HL)) {
        return lba::forbid;
    }

    // rule LB30
    if (((ce == lbc::AL || ce == lbc::HL || ce == lbc::NU) && n == lbc::OP) || (ce == lbc::CP && (n == lbc::AL || n == lbc::HL || n == lbc::NU))) {
        return lba::forbid;
    }

    // rule LB30a.1
    if (p == lbc::RI && ca == lbc::RI && n == lbc::RI) {
        return lba::allow;
    }

    // rule LB30a.2
    if (ce == lbc::RI && n == lbc::RI) {
        return lba::forbid;
    }

    // rule LB30b
    if (ce == lbc::EB && n == lbc::EM) {
        return lba::forbid;
    }

    // default
    return lba::allow;   
}

} // namespace tint::lbrk